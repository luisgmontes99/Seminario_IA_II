# -*- coding: utf-8 -*-
"""Perceptron 2da parte.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q_v5L_9x_wy4DAlJZNGEVquVN8IC-Yq3
"""

import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import random

# Función de activación sigmoide
def sigmoid(x):
    clipped_x = np.clip(x, -500, 500)
    return 1 / (1 + np.exp(-clipped_x))

def Perceptron_entrenamiento(entrada1_train, entrada2_train, entrada3_train, salida_train, aprendizaje, epocas):
  pesos = np.random.rand(3)  # Ahora hay 3 pesos
  sesgo = np.random.rand()
  for i in range(epocas):
    for l in range(len(entrada1_train)):
      #Calcular la salida
      salida = sigmoid(np.dot([entrada1_train[l], entrada2_train[l], entrada3_train[l]], pesos) + sesgo)
      #Calcula el error
      error = salida_train[l]- salida
      #Cambiar pesos
      pesos[0] = pesos[0] + aprendizaje*error*entrada1_train[l]
      pesos[1] = pesos[1] + aprendizaje*error*entrada2_train[l]
      pesos[2] = pesos[2] + aprendizaje*error*entrada3_train[l]
      sesgo += aprendizaje * error
  return pesos, sesgo

#Reemplazar valores
def sustituir(x):
  if x<0:
    return 0
  else:
    return 1

#1era forma para particionar
datos = pd.read_csv('/content/spheres1d10.csv',header=None)
# Obtener el 80% de los datos
datos_80_porcentaje = datos.sample(frac=0.8)
# Obtener el índice de las filas que están en datos_80_porcentaje
indices_80_porcentaje = datos_80_porcentaje.index
# Obtener el 20% restante
datos_20_porcentaje = datos.drop(indices_80_porcentaje)
datos_80_porcentaje =datos_80_porcentaje.applymap(sustituir)
datos_80_porcentaje.columns=['X','Y','Z','S']
datos_80_porcentaje.reset_index(drop=True, inplace=True)
entrada1 = datos_80_porcentaje['X']
entrada2 = datos_80_porcentaje['Y']
entrada3 = datos_80_porcentaje['Z']
salidas = datos_80_porcentaje['S']
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)

#2da forma para particionar
# Cargar el archivo en una lista de líneas
with open('/content/spheres1d10.csv', 'r') as file:
    lineas = file.readlines()
# Obtener el 80% de las líneas aleatoriamente
datos_80_porcentaje = random.sample(lineas, int(len(lineas) * 0.8))
datos_20_porcentaje = [linea for linea in lineas if linea not in datos_80_porcentaje]
# Dividir cada línea en una lista de elementos
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
# Crear un DataFrame a partir de la lista de listas
datos_80_porcentaje = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
datos_80_porcentaje[['X', 'Y', 'Z', 'S']] = datos_80_porcentaje[['X', 'Y', 'Z', 'S']].astype(float)
datos_80_porcentaje =datos_80_porcentaje.applymap(sustituir)
datos_80_porcentaje.reset_index(drop=True, inplace=True)
entrada1 = datos_80_porcentaje['X']
entrada2 = datos_80_porcentaje['Y']
entrada3 = datos_80_porcentaje['Z']
salidas = datos_80_porcentaje['S']
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)

#3er forma para particionar
# Cargar el archivo en una lista de líneas
with open('/content/spheres1d10.csv', 'r') as file:
    lineas = file.readlines()
# Dividir los datos en dos partes (80% y 20%)
datos_80_porcentaje = lineas[:int(len(lineas) * 0.8)]
# Obtén el 20% restante
datos_20_porcentaje = lineas[int(len(lineas) * 0.8):]
# Dividir cada línea en una lista de elementos
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
# Crear un DataFrame a partir de la lista de listas
datos_80_porcentaje = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
datos_80_porcentaje[['X', 'Y', 'Z', 'S']] = datos_80_porcentaje[['X', 'Y', 'Z', 'S']].astype(float)
datos_80_porcentaje =datos_80_porcentaje.applymap(sustituir)
datos_80_porcentaje.reset_index(drop=True, inplace=True)
entrada1 = datos_80_porcentaje['X']
entrada2 = datos_80_porcentaje['Y']
entrada3 = datos_80_porcentaje['Z']
salidas = datos_80_porcentaje['S']
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)

#4ta forma para particionar (8-2)
 # Inicializa los arreglos donde almacenarás los datos
datos_80_porcentaje = []
datos_20_porcentaje = []
# Abre el archivo en modo lectura
with open('/content/spheres1d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        # Almacena los elementos en los arreglos correspondientes
        if(cont_e<8):
          datos_80_porcentaje.append(linea)
          cont_e += 1
        else:
          datos_20_porcentaje.append(linea)
          cont_g += 1
          if(cont_g==2):
            cont_e=0
            cont_g=0
# Dividir cada línea en una lista de elementos
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
# Crear un DataFrame a partir de la lista de listas
datos_80_porcentaje = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
datos_80_porcentaje[['X', 'Y', 'Z', 'S']] = datos_80_porcentaje[['X', 'Y', 'Z', 'S']].astype(float)
datos_80_porcentaje =datos_80_porcentaje.applymap(sustituir)
datos_80_porcentaje.reset_index(drop=True, inplace=True)
entrada1 = datos_80_porcentaje['X']
entrada2 = datos_80_porcentaje['Y']
entrada3 = datos_80_porcentaje['Z']
salidas = datos_80_porcentaje['S']
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)

#5ta forma para particionar (2-8)
# Abre el archivo en modo lectura
# Inicializa los arreglos donde almacenarás los datos
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres1d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        # Almacena los elementos en los arreglos correspondientes
        if(cont_g<2):
          datos_20_porcentaje.append(linea)
          cont_g += 1
        else:
          datos_80_porcentaje.append(linea)
          cont_e += 1
          if(cont_e==8):
            cont_e=0
            cont_g=0
# Dividir cada línea en una lista de elementos
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
# Crear un DataFrame a partir de la lista de listas
datos_80_porcentaje = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
datos_80_porcentaje[['X', 'Y', 'Z', 'S']] = datos_80_porcentaje[['X', 'Y', 'Z', 'S']].astype(float)
datos_80_porcentaje =datos_80_porcentaje.applymap(sustituir)
datos_80_porcentaje.reset_index(drop=True, inplace=True)
entrada1 = datos_80_porcentaje['X']
entrada2 = datos_80_porcentaje['Y']
entrada3 = datos_80_porcentaje['Z']
salidas = datos_80_porcentaje['S']
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)

"""Generar la particiones de los 3 archivos y formando 2 arreglos (Entrenamiento y Generalizacion)"""

#1era forma para particionar los 3 archivos
archivo1 = pd.read_csv('/content/spheres2d10.csv',header=None)
arch1_80porcentaje = archivo1.sample(frac=0.8)
indices_80_porcentaje = arch1_80porcentaje.index
arch1_20porcentaje = archivo1.drop(indices_80_porcentaje)
#------------------------------------------------------------#
archivo2 = pd.read_csv('/content/spheres2d50.csv',header=None)
arch2_80porcentaje = archivo2.sample(frac=0.8)
indices_80_porcentaje = arch2_80porcentaje.index
arch2_20porcentaje = archivo2.drop(indices_80_porcentaje)
#------------------------------------------------------------#
archivo3 = pd.read_csv('/content/spheres2d70.csv',header=None)
arch3_80porcentaje = archivo3.sample(frac=0.8)
indices_80_porcentaje = arch1_80porcentaje.index
arch3_20porcentaje = archivo3.drop(indices_80_porcentaje)
#------------------------------------------------------------#
union_80 = [arch1_80porcentaje,arch2_80porcentaje,arch3_80porcentaje]
resultado_80 = pd.concat(union_80, axis=0, ignore_index=True)
union_20 = [arch1_20porcentaje,arch2_20porcentaje,arch3_20porcentaje]
resultado_20 = pd.concat(union_20, axis=0, ignore_index=True)
#------------------------------------------------------------#
resultado_80.columns=['X','Y','Z','S']
resultado_20.columns=['X','Y','Z','S']
resultado_80.reset_index(drop=True, inplace=True)
resultado_20.reset_index(drop=True, inplace=True)
entrada1 = resultado_80['X']
entrada2 = resultado_80['Y']
entrada3 = resultado_80['Z']
salidas = resultado_80['S']
#print(len(resultado_80))
#print(len(resultado_20))
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)
#TEST1
entrada1 = resultado_20['X']
entrada2 = resultado_20['Y']
entrada3 = resultado_20['Z']
salidas = resultado_20['S']
def predecir(x,y,z):
    return sigmoid(np.dot([x, y, z], Pesos_entrenados)+sesgo_entrenado)
salida_pro = []
for i in range(len(entrada1)):
    prediccion = predecir(entrada1[i], entrada2[i], entrada3[i])
    salida_pro.append(prediccion)
#Grafica de puntos
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
# Grafica de puntos en 3D
ax.scatter(entrada1, entrada2, entrada3, c='red', marker='o')
# Establece etiquetas de los ejes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.show()

#2da forma para particionar los archivos
# Cargar el archivo en una lista de líneas
with open('/content/spheres2d10.csv', 'r') as file:
    lineas = file.readlines()
arch1_80porcentaje = random.sample(lineas, int(len(lineas) * 0.8))
arch1_20porcentaje = [linea for linea in lineas if linea not in arch1_80porcentaje]
lista_valores = [linea.strip().split(',') for linea in arch1_80porcentaje]
datos_80_arch1 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in arch1_20porcentaje]
datos_20_arch1 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#------------------------------------------------------------------------------#
with open('/content/spheres2d50.csv', 'r') as file:
    lineas = file.readlines()
arch2_80porcentaje = random.sample(lineas, int(len(lineas) * 0.8))
arch2_20porcentaje = [linea for linea in lineas if linea not in arch2_80porcentaje]
lista_valores = [linea.strip().split(',') for linea in arch2_80porcentaje]
datos_80_arch2 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in arch2_20porcentaje]
datos_20_arch2 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#------------------------------------------------------------------------------#
with open('/content/spheres2d70.csv', 'r') as file:
    lineas = file.readlines()
arch3_80porcentaje = random.sample(lineas, int(len(lineas) * 0.8))
arch3_20porcentaje = [linea for linea in lineas if linea not in arch3_80porcentaje]
lista_valores = [linea.strip().split(',') for linea in arch3_80porcentaje]
datos_80_arch3 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in arch3_20porcentaje]
datos_20_arch3 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#------------------------------------------------------------------------------#
union_80 = [datos_80_arch1,datos_80_arch2,datos_80_arch3]
resultado_80 = pd.concat(union_80, axis=0, ignore_index=True)
union_20 = [datos_20_arch1,datos_20_arch2,datos_20_arch3]
resultado_20 = pd.concat(union_20, axis=0, ignore_index=True)
#------------------------------------------------------------------------------#
resultado_80[['X', 'Y', 'Z', 'S']] = resultado_80[['X', 'Y', 'Z', 'S']].astype(float)
resultado_80.reset_index(drop=True, inplace=True)
resultado_20[['X', 'Y', 'Z', 'S']] = resultado_20[['X', 'Y', 'Z', 'S']].astype(float)
resultado_20.reset_index(drop=True, inplace=True)
entrada1 = resultado_80['X']
entrada2 = resultado_80['Y']
entrada3 = resultado_80['Z']
salidas = resultado_80['S']
#print(len(resultado_80))
#print(len(resultado_20))
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)
#TEST2
entrada1 = resultado_20['X']
entrada2 = resultado_20['Y']
entrada3 = resultado_20['Z']
salidas = resultado_20['S']
def predecir(x,y,z):
    return sigmoid(np.dot([x, y, z], Pesos_entrenados)+sesgo_entrenado)
salida_pro = []
for i in range(len(entrada1)):
    prediccion = predecir(entrada1[i], entrada2[i], entrada3[i])
    salida_pro.append(prediccion)
#Grafica de puntos
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
# Grafica de puntos en 3D
ax.scatter(entrada1, entrada2, entrada3, c='red', marker='o')
# Establece etiquetas de los ejes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

#3er forma para particionar los archivos
with open('/content/spheres2d10.csv', 'r') as file:
    lineas = file.readlines()
arch1_80porcentaje = lineas[:int(len(lineas) * 0.8)]
arch1_20porcentaje = lineas[int(len(lineas) * 0.8):]
lista_valores = [linea.strip().split(',') for linea in arch1_80porcentaje]
datos_80_arch1 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in arch1_20porcentaje]
datos_20_arch1 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------#
with open('/content/spheres2d50.csv', 'r') as file:
    lineas = file.readlines()
arch2_80porcentaje = lineas[:int(len(lineas) * 0.8)]
arch2_20porcentaje = lineas[int(len(lineas) * 0.8):]
lista_valores = [linea.strip().split(',') for linea in arch2_80porcentaje]
datos_80_arch2 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in arch2_20porcentaje]
datos_20_arch12 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------#
with open('/content/spheres2d70.csv', 'r') as file:
    lineas = file.readlines()
arch3_80porcentaje = lineas[:int(len(lineas) * 0.8)]
arch3_20porcentaje = lineas[int(len(lineas) * 0.8):]
lista_valores = [linea.strip().split(',') for linea in arch3_80porcentaje]
datos_80_arch3 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in arch3_20porcentaje]
datos_20_arch3 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------#
union_80 = [datos_80_arch1,datos_80_arch2,datos_80_arch3]
resultado_80 = pd.concat(union_80, axis=0, ignore_index=True)
union_20 = [datos_20_arch1,datos_20_arch2,datos_20_arch3]
resultado_20 = pd.concat(union_20, axis=0, ignore_index=True)
#------------------------------------------------------------------------------#
resultado_80[['X', 'Y', 'Z', 'S']] = resultado_80[['X', 'Y', 'Z', 'S']].astype(float)
resultado_80.reset_index(drop=True, inplace=True)
resultado_20[['X', 'Y', 'Z', 'S']] = resultado_20[['X', 'Y', 'Z', 'S']].astype(float)
resultado_20.reset_index(drop=True, inplace=True)
entrada1 = resultado_80['X']
entrada2 = resultado_80['Y']
entrada3 = resultado_80['Z']
salidas = resultado_80['S']
#print(len(resultado_80))
#print(len(resultado_20))
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)
#TEST3
entrada1 = resultado_20['X']
entrada2 = resultado_20['Y']
entrada3 = resultado_20['Z']
salidas = resultado_20['S']
def predecir(x,y,z):
    return sigmoid(np.dot([x, y, z], Pesos_entrenados)+sesgo_entrenado)
salida_pro = []
for i in range(len(entrada1)):
    prediccion = predecir(entrada1[i], entrada2[i], entrada3[i])
    salida_pro.append(prediccion)
#Grafica de puntos
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
# Grafica de puntos en 3D
ax.scatter(entrada1, entrada2, entrada3, c='red', marker='o')
# Establece etiquetas de los ejes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

#4ta forma para particionar (8-2) los archivos
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres2d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        if(cont_e<8):
          datos_80_porcentaje.append(linea)
          cont_e += 1
        else:
          datos_20_porcentaje.append(linea)
          cont_g += 1
          if(cont_g==2):
            cont_e=0
            cont_g=0
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
datos_80_arch1 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in datos_20_porcentaje]
datos_20_arch1 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------------------------#
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres2d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        if(cont_e<8):
          datos_80_porcentaje.append(linea)
          cont_e += 1
        else:
          datos_20_porcentaje.append(linea)
          cont_g += 1
          if(cont_g==2):
            cont_e=0
            cont_g=0
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
datos_80_arch2 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in datos_20_porcentaje]
datos_20_arch2 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------------------------#
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres2d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        if(cont_e<8):
          datos_80_porcentaje.append(linea)
          cont_e += 1
        else:
          datos_20_porcentaje.append(linea)
          cont_g += 1
          if(cont_g==2):
            cont_e=0
            cont_g=0
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
datos_80_arch3 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in datos_20_porcentaje]
datos_20_arch3 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------------------------#
union_80 = [datos_80_arch1,datos_80_arch2,datos_80_arch3]
resultado_80 = pd.concat(union_80, axis=0, ignore_index=True)
union_20 = [datos_20_arch1,datos_20_arch2,datos_20_arch3]
resultado_20 = pd.concat(union_20, axis=0, ignore_index=True)
#------------------------------------------------------------------------------#
resultado_80[['X', 'Y', 'Z', 'S']] = resultado_80[['X', 'Y', 'Z', 'S']].astype(float)
resultado_80.reset_index(drop=True, inplace=True)
resultado_20[['X', 'Y', 'Z', 'S']] = resultado_20[['X', 'Y', 'Z', 'S']].astype(float)
resultado_20.reset_index(drop=True, inplace=True)
entrada1 = resultado_80['X']
entrada2 = resultado_80['Y']
entrada3 = resultado_80['Z']
salidas = resultado_80['S']
#print(len(resultado_80))
#print(len(resultado_20))
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)
#TEST4
entrada1 = resultado_20['X']
entrada2 = resultado_20['Y']
entrada3 = resultado_20['Z']
salidas = resultado_20['S']
def predecir(x,y,z):
    return sigmoid(np.dot([x, y, z], Pesos_entrenados)+sesgo_entrenado)
salida_pro = []
for i in range(len(entrada1)):
    prediccion = predecir(entrada1[i], entrada2[i], entrada3[i])
    salida_pro.append(prediccion)
#Grafica de puntos
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
# Grafica de puntos en 3D
ax.scatter(entrada1, entrada2, entrada3, c='red', marker='o')
# Establece etiquetas de los ejes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

#5ta forma para particionar (2-8) los archivos
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres2d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        if(cont_g<2):
          datos_20_porcentaje.append(linea)
          cont_g += 1
        else:
          datos_80_porcentaje.append(linea)
          cont_e += 1
          if(cont_e==8):
            cont_e=0
            cont_g=0
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
datos_80_arch1 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in datos_20_porcentaje]
datos_20_arch1 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------------------------#
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres2d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        if(cont_g<2):
          datos_20_porcentaje.append(linea)
          cont_g += 1
        else:
          datos_80_porcentaje.append(linea)
          cont_e += 1
          if(cont_e==8):
            cont_e=0
            cont_g=0
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
datos_80_arch2 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in datos_20_porcentaje]
datos_20_arch2 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------------------------#
datos_80_porcentaje = []
datos_20_porcentaje = []
with open('/content/spheres2d10.csv', 'r') as file:
    cont_e=0
    cont_g=0
    for linea in file:
        if(cont_g<2):
          datos_20_porcentaje.append(linea)
          cont_g += 1
        else:
          datos_80_porcentaje.append(linea)
          cont_e += 1
          if(cont_e==8):
            cont_e=0
            cont_g=0
lista_valores = [linea.strip().split(',') for linea in datos_80_porcentaje]
datos_80_arch3 = pd.DataFrame(lista_valores, columns=['X','Y','Z','S'])
lista_valores2 = [linea.strip().split(',') for linea in datos_20_porcentaje]
datos_20_arch3 = pd.DataFrame(lista_valores2, columns=['X','Y','Z','S'])
#---------------------------------------------------------------------------------------------------#
union_80 = [datos_80_arch1,datos_80_arch2,datos_80_arch3]
resultado_80 = pd.concat(union_80, axis=0, ignore_index=True)
union_20 = [datos_20_arch1,datos_20_arch2,datos_20_arch3]
resultado_20 = pd.concat(union_20, axis=0, ignore_index=True)
#------------------------------------------------------------------------------#
resultado_80[['X', 'Y', 'Z', 'S']] = resultado_80[['X', 'Y', 'Z', 'S']].astype(float)
resultado_80.reset_index(drop=True, inplace=True)
resultado_20[['X', 'Y', 'Z', 'S']] = resultado_20[['X', 'Y', 'Z', 'S']].astype(float)
resultado_20.reset_index(drop=True, inplace=True)
entrada1 = resultado_80['X']
entrada2 = resultado_80['Y']
entrada3 = resultado_80['Z']
salidas = resultado_80['S']
#print(len(resultado_80))
#print(len(resultado_20))
Valor_aprendizaje=0.1
Epocas = 50
Pesos_entrenados, sesgo_entrenado = Perceptron_entrenamiento(entrada1,entrada2,entrada3,salidas,Valor_aprendizaje,Epocas)
#print("Peso:",Pesos_entrenados," y el sesgo es: ",sesgo_entrenado,)
#TEST4
entrada1 = resultado_20['X']
entrada2 = resultado_20['Y']
entrada3 = resultado_20['Z']
salidas = resultado_20['S']
def predecir(x,y,z):
    return sigmoid(np.dot([x, y, z], Pesos_entrenados)+sesgo_entrenado)
salida_pro = []
for i in range(len(entrada1)):
    prediccion = predecir(entrada1[i], entrada2[i], entrada3[i])
    salida_pro.append(prediccion)
#Grafica de puntos
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
# Grafica de puntos en 3D
ax.scatter(entrada1, entrada2, entrada3, c='red', marker='o')
# Establece etiquetas de los ejes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')